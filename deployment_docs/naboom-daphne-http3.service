[Unit]
Description=Naboom Community Daphne ASGI/WebSocket Server (HTTP/3 Enhanced)
After=network.target redis-server.service
Wants=network.target
Requires=redis-server.service

[Service]
Type=simple
User=www-data
Group=www-data
WorkingDirectory=/opt/naboomcommunity
EnvironmentFile=/opt/naboomcommunity/.env

# Python 3.12.3 optimizations for WebSocket over HTTP/3
Environment=PYTHONPATH=/opt/naboomcommunity
Environment=PYTHONUNBUFFERED=1
Environment=PYTHONDONTWRITEBYTECODE=1
Environment=PYTHONHASHSEED=random
Environment=PYTHONOPTIMIZE=1

# Django 5.2 + Channels 4.0 + HTTP/3 specific settings
Environment=DJANGO_SETTINGS_MODULE=naboomcommunity.settings.production
Environment=CHANNELS_REDIS_DB=1
Environment=WEBSOCKET_HTTP3_OPTIMIZED=true

# HTTP/3 WebSocket performance tuning
Environment=DAPHNE_HTTP3_READY=1
Environment=WEBSOCKET_COMPRESSION=permessage-deflate

# Primary Daphne ASGI server optimized for WebSocket over HTTP/3
ExecStart=/opt/naboomcommunity/venv/bin/daphne \
    -b 127.0.0.1 \
    -p 9000 \
    --proxy-headers \
    --root-path=/opt/naboomcommunity \
    --verbosity 1 \
    --access-log /var/log/naboom/daphne/access.log \
    --server-name naboom-daphne-http3 \
    --application-close-timeout 90 \
    --websocket_timeout 86400 \
    --websocket_connect_timeout 45 \
    --websocket_handshake_timeout 30 \
    naboomcommunity.asgi:application

# Backup Daphne instances for WebSocket load balancing
ExecStartPost=/bin/sleep 8
ExecStartPost=/opt/naboomcommunity/venv/bin/daphne \
    -b 127.0.0.1 \
    -p 9001 \
    --proxy-headers \
    --root-path=/opt/naboomcommunity \
    --verbosity 1 \
    --access-log /var/log/naboom/daphne/access-backup.log \
    --server-name naboom-daphne-backup \
    --application-close-timeout 90 \
    --websocket_timeout 86400 \
    --websocket_connect_timeout 45 \
    --daemon \
    naboomcommunity.asgi:application

# Third Daphne instance for high availability WebSocket over HTTP/3
ExecStartPost=/bin/sleep 5
ExecStartPost=/opt/naboomcommunity/venv/bin/daphne \
    -b 127.0.0.1 \
    -p 9002 \
    --proxy-headers \
    --root-path=/opt/naboomcommunity \
    --verbosity 1 \
    --access-log /var/log/naboom/daphne/access-backup2.log \
    --server-name naboom-daphne-backup2 \
    --application-close-timeout 90 \
    --websocket_timeout 86400 \
    --websocket_connect_timeout 45 \
    --daemon \
    naboomcommunity.asgi:application

# Process management optimized for HTTP/3 WebSocket workload
Restart=always
RestartSec=12
StartLimitInterval=600
StartLimitBurst=3
KillMode=mixed
KillSignal=SIGTERM
TimeoutStartSec=120
TimeoutStopSec=90

# Enhanced resource limits for WebSocket over HTTP/3
LimitNOFILE=131072
LimitNPROC=32768
LimitCORE=0

# Memory optimizations for Python 3.12.3 WebSocket handling
Environment=MALLOC_TRIM_THRESHOLD_=131072
Environment=MALLOC_MMAP_THRESHOLD_=131072

# WebSocket over HTTP/3 specific optimizations
Environment=ASGI_THREADS=8
Environment=CHANNELS_CAPACITY=4000
Environment=MAX_WEBSOCKET_CONNECTIONS=10000

# HTTP/3 connection management
Environment=HTTP3_WEBSOCKET_BUFFER_SIZE=65536
Environment=HTTP3_STREAM_BUFFER_SIZE=32768

# Security hardening for WebSocket over HTTP/3
NoNewPrivileges=true
PrivateTmp=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=/opt/naboomcommunity /var/log/naboom

# Logging optimized for WebSocket over HTTP/3 analysis
StandardOutput=journal
StandardError=journal
SyslogIdentifier=naboom-daphne-http3

# Enhanced health monitoring for WebSocket over HTTP/3
ExecReload=/bin/kill -HUP $MAINPID
ExecStop=/bin/kill -TERM $MAINPID

# WebSocket over HTTP/3 readiness verification
ExecStartPost=/bin/sleep 12
ExecStartPost=/bin/bash -c 'timeout 10 python3 -c "
import asyncio
import websockets
import sys

async def test_websocket():
    try:
        uri = \"ws://127.0.0.1:9000/ws/test/\"
        async with websockets.connect(uri, timeout=5) as websocket:
            await websocket.send(\"ping\")
            response = await asyncio.wait_for(websocket.recv(), timeout=3)
            print(f\"WebSocket HTTP/3 backend test: {response}\")
            return True
    except Exception as e:
        print(f\"WebSocket HTTP/3 backend test failed: {e}\")
        return False

result = asyncio.run(test_websocket())
sys.exit(0 if result else 1)
" && echo "Daphne WebSocket HTTP/3 backend ready" | systemd-cat -t naboom-daphne || echo "Daphne WebSocket HTTP/3 backend test failed" | systemd-cat -t naboom-daphne'

# Backup instance health check
ExecStartPost=/bin/bash -c 'nc -z 127.0.0.1 9001 && echo "Backup Daphne WebSocket HTTP/3 backend ready" | systemd-cat -t naboom-daphne || true'
ExecStartPost=/bin/bash -c 'nc -z 127.0.0.1 9002 && echo "Secondary backup Daphne WebSocket HTTP/3 backend ready" | systemd-cat -t naboom-daphne || true'

[Install]
WantedBy=multi-user.target