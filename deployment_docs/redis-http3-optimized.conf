# ============================================================================
# REDIS 8.2.2 + HTTP/3 OPTIMIZED CONFIGURATION
# ============================================================================
# File: /etc/redis/redis-http3-optimized.conf
#
# Enhanced for HTTP/3 workloads with:
#   - Optimized for WebSocket over HTTP/3 connections
#   - Enhanced pub/sub for real-time over QUIC
#   - Memory management for HTTP/3 multiplexing
#   - Connection pooling optimization for HTTP/3
#   - Advanced threading for concurrent HTTP/3 streams
# ============================================================================

# ============================================================================
# NETWORK CONFIGURATION (HTTP/3 Enhanced)
# ============================================================================

# Bind to localhost with enhanced IPv6 support for HTTP/3
bind 127.0.0.1 -::1
port 6379

# Enhanced TCP settings for HTTP/3 backend connections
tcp-backlog 1024                # Increased for HTTP/3 multiplexing
tcp-keepalive 300
timeout 600                     # Longer for HTTP/3 persistent connections

# HTTP/3 connection optimization
socket-mark-id 0

# ============================================================================
# SECURITY CONFIGURATION (Enhanced for HTTP/3)
# ============================================================================

# Protected mode
protected-mode yes

# Master password (set a strong password)
requirepass your-strong-redis-password-here

# Enhanced ACL system for HTTP/3 workloads
user default off nopass ~* &* -@all

# Django application user (HTTP/3 optimized permissions)
user app_user on >your-app-user-password-here ~* &* +@all -@dangerous -flushdb -flushall -shutdown -debug -config

# WebSocket/HTTP/3 specific user for Channels
user websocket_user on >your-websocket-password-here ~channels:* ~ws:* ~http3:* &* +@read +@write +@stream +pubsub -@dangerous

# Real-time data user for HTTP/3 streams
user realtime_user on >your-realtime-password-here ~panic:* ~emergency:* ~stream:* &* +@read +@write +@stream +pubsub -@dangerous

# Monitoring user for HTTP/3 analytics
user monitoring_user on >your-monitoring-password-here ~stats:* ~metrics:* ~http3:* &* +@read +info +ping -@all

# Redis 8.2.2 security enhancements
enable-protected-configs yes
enable-debug-command no
enable-module-command no

# ============================================================================
# THREADING CONFIGURATION (HTTP/3 Optimized)
# ============================================================================

# Enhanced I/O threading for HTTP/3 concurrent streams
io-threads 8                    # Increased for HTTP/3 multiplexing
io-threads-do-reads yes

# Background threading for HTTP/3 workloads
lazyfree-lazy-eviction yes
lazyfree-lazy-expire yes
lazyfree-lazy-server-del yes
replica-lazy-flush yes

# ============================================================================
# MEMORY MANAGEMENT (HTTP/3 Workload Optimized)
# ============================================================================

# Increased memory for HTTP/3 concurrent connections
maxmemory 8gb                   # Increased for HTTP/3 workload

# Enhanced eviction policy for HTTP/3 session data
maxmemory-policy allkeys-lru
maxmemory-samples 10

# HTTP/3 specific memory optimizations
maxmemory-eviction-tenacity 10

# WebSocket and real-time data structures optimization
hash-max-listpack-entries 2000  # Increased for HTTP/3 session data
hash-max-listpack-value 128     # Larger for HTTP/3 metadata
list-max-listpack-size -2
list-compress-depth 1
set-max-intset-entries 1024     # Increased for connection sets
zset-max-listpack-entries 512   # Larger for WebSocket queues
zset-max-listpack-value 128

# Stream optimizations for HTTP/3 real-time data
stream-node-max-bytes 8192      # Larger for HTTP/3 streams
stream-node-max-entries 200     # More entries for concurrent streams

# Memory efficiency for HTTP/3
activerehashing yes
stop-writes-on-bgsave-error yes

# ============================================================================
# PERSISTENCE (HTTP/3 Enhanced)
# ============================================================================

# Enhanced RDB snapshots for HTTP/3 session data
save 900 1       # Save if at least 1 key changed in 900 seconds
save 300 10      # Save if at least 10 keys changed in 300 seconds
save 60 10000    # Save if at least 10,000 keys changed in 60 seconds
save 10 100000   # Save if at least 100,000 keys changed in 10 seconds (HTTP/3 burst)

# RDB settings optimized for HTTP/3 data
rdbcompression yes
rdbchecksum yes
rdb-del-sync-files no
dbfilename dump.rdb
dir /var/lib/redis/

# Enhanced AOF for HTTP/3 real-time data persistence
appendonly yes
appendfilename "appendonly.aof"
appenddirname "appendonlydir"

# AOF fsync optimized for HTTP/3 workload
appendfsync everysec
no-appendfsync-on-rewrite no

# AOF rewrite settings for HTTP/3 data patterns
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 128mb  # Larger for HTTP/3 workload
aof-rewrite-incremental-fsync yes

# Redis 8.2.2 AOF enhancements for HTTP/3
aof-load-truncated yes
aof-use-rdb-preamble yes
aof-timestamp-enabled no

# ============================================================================
# DATABASE CONFIGURATION (HTTP/3 Specific)
# ============================================================================

databases 16

# HTTP/3 database allocation:
# DB 0: Django Cache (HTTP/3 response cache)
# DB 1: Channels Layer (WebSocket over HTTP/3)
# DB 2: Celery Broker & Results (HTTP/3 task queue)
# DB 3: Django Sessions (HTTP/3 session data)
# DB 4: Real-time streams (HTTP/3 SSE/WebSocket data)
# DB 5: Connection metadata (HTTP/3 connection info)
# DB 6: Rate limiting data (HTTP/3 rate limits)
# DB 7: Analytics data (HTTP/3 performance metrics)
# DB 8-15: Available for future HTTP/3 features

# ============================================================================
# PERFORMANCE TUNING (HTTP/3 Optimized)
# ============================================================================

# Enhanced background task frequency for HTTP/3
hz 10
dynamic-hz yes

# Latency optimization for HTTP/3 real-time features
latency-monitor-threshold 50    # Lower threshold for HTTP/3

# Client timeout optimized for HTTP/3 persistent connections
timeout 600                     # Longer for HTTP/3 keep-alive

# ============================================================================
# CLIENT CONFIGURATION (HTTP/3 Enhanced)
# ============================================================================

# Increased client connections for HTTP/3 multiplexing
maxclients 40000                # Much higher for HTTP/3 concurrent streams

# Enhanced client output buffer limits for HTTP/3 workloads

# Normal clients (Django cache, sessions) - HTTP/3 optimized
client-output-buffer-limit normal 0 0 0

# Replica clients (if using replication)
client-output-buffer-limit replica 512mb 128mb 60

# Pub/Sub clients (WebSocket over HTTP/3, real-time streams)
client-output-buffer-limit pubsub 128mb 32mb 60    # Increased for HTTP/3

# HTTP/3 client tracking optimization
tracking-table-max-keys 2000000  # Increased for HTTP/3 connection tracking

# ============================================================================
# LOGGING (HTTP/3 Enhanced)
# ============================================================================

# Enhanced log level for HTTP/3 debugging
loglevel notice

# Log file with HTTP/3 context
logfile /var/log/redis/redis-http3.log

# Syslog for HTTP/3 monitoring
syslog-enabled yes
syslog-ident redis-http3
syslog-facility local0

# ============================================================================
# SLOW LOG (HTTP/3 Optimized)
# ============================================================================

# Lower threshold for HTTP/3 performance monitoring
slowlog-log-slower-than 5000    # 5ms threshold for HTTP/3
slowlog-max-len 2000            # More entries for HTTP/3 analysis

# ============================================================================
# ADVANCED CONFIGURATION (HTTP/3 Specific)
# ============================================================================

# Enhanced keyspace notifications for HTTP/3 real-time features
notify-keyspace-events "KEA"     # Key events, expired events, all commands

# Hash table settings optimized for HTTP/3 session data
hash-max-ziplist-entries 1024
hash-max-ziplist-value 128

# List settings for HTTP/3 message queues
list-max-ziplist-size -2
list-compress-depth 0

# Set settings for HTTP/3 connection management
set-max-intset-entries 1024

# Sorted set settings for HTTP/3 priority queues
zset-max-ziplist-entries 256
zset-max-ziplist-value 128

# HyperLogLog for HTTP/3 analytics
hll-sparse-max-bytes 6000       # Increased for HTTP/3 metrics

# ============================================================================
# PUB/SUB OPTIMIZATION (HTTP/3 Real-time)
# ============================================================================

# Enhanced pub/sub for WebSocket over HTTP/3
client-output-buffer-limit pubsub 128mb 32mb 60

# Pub/sub pattern matching optimization for HTTP/3 channels
pubsub-channels-max-size 512

# ============================================================================
# HTTP/3 SPECIFIC OPTIMIZATIONS
# ============================================================================

# Stream settings optimized for HTTP/3 real-time data
stream-node-max-bytes 8192
stream-node-max-entries 200

# Memory usage optimization for HTTP/3 multiplexing
memory-usage-sample-probability 0.1

# Active memory defragmentation for HTTP/3 workloads
activedefrag yes               # Enable for HTTP/3 memory patterns
active-defrag-enabled yes
active-defrag-ignore-bytes 200mb
active-defrag-threshold-lower 5
active-defrag-threshold-upper 50
active-defrag-cycle-min 1
active-defrag-cycle-max 15

# ============================================================================
# CLUSTERING PREPARATION (HTTP/3 Future)
# ============================================================================

# Cluster settings for future HTTP/3 scaling
# cluster-enabled no
# cluster-config-file nodes-6379.conf
# cluster-node-timeout 15000
# cluster-require-full-coverage yes
# cluster-migration-barrier 1
# cluster-allow-reads-when-down no

# ============================================================================
# REPLICATION (HTTP/3 High Availability)
# ============================================================================

# Master-replica settings for HTTP/3 high availability
# replicaof <masterip> <masterport>
# masterauth <master-password>
# replica-serve-stale-data yes
# replica-read-only yes
# repl-diskless-sync no
# repl-diskless-sync-delay 5
# replica-priority 100

# Redis 8.2.2 replication improvements for HTTP/3
# repl-diskless-load disabled
# replica-lazy-flush yes

# ============================================================================
# MODULES (HTTP/3 Analytics)
# ============================================================================

# Load modules for HTTP/3 analytics (uncomment as needed)
# loadmodule /usr/lib/redis/modules/redistimeseries.so
# loadmodule /usr/lib/redis/modules/rejson.so
# loadmodule /usr/lib/redis/modules/redisearch.so

# Module directory
# dir /usr/lib/redis/modules/

# ============================================================================
# NETWORKING OPTIMIZATIONS (HTTP/3 Backend)
# ============================================================================

# Enhanced TCP settings for HTTP/3 backend connections
tcp-keepalive 300
so-keepalive 1

# Connection optimization for HTTP/3 multiplexing
timeout 600

# ============================================================================
# TLS CONFIGURATION (Future HTTP/3 Security)
# ============================================================================

# TLS settings for future encrypted Redis connections
# port 0
# tls-port 6380
# tls-cert-file /etc/redis/tls/redis.crt
# tls-key-file /etc/redis/tls/redis.key
# tls-ca-cert-file /etc/redis/tls/ca.crt
# tls-dh-params-file /etc/redis/tls/redis.dh
# tls-protocols "TLSv1.3 TLSv1.2"
# tls-ciphers HIGH:!aNULL:!MD5
# tls-ciphersuites TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256

# ============================================================================
# MONITORING AND METRICS (HTTP/3 Specific)
# ============================================================================

# Enhanced latency monitoring for HTTP/3
latency-monitor-threshold 50

# Memory fragmentation monitoring
active-defrag-enabled yes

# Connection and command statistics
info-replication-use-diskless-load no

# ============================================================================
# HTTP/3 PERFORMANCE COMMANDS
# ============================================================================

# Custom commands for HTTP/3 monitoring (via modules or Lua scripts)
# These would be implemented via Lua scripts or modules:
# - HTTP3.CONNECTIONS (track active HTTP/3 connections)
# - HTTP3.STREAMS (monitor WebSocket streams over HTTP/3)
# - HTTP3.LATENCY (measure HTTP/3 vs HTTP/2 performance)
# - HTTP3.CACHE (HTTP/3 specific cache operations)

# ============================================================================
# OPTIMIZATION NOTES FOR HTTP/3 WORKLOAD
# ============================================================================

# This Redis configuration is optimized for:
# 1. High concurrent WebSocket connections over HTTP/3
# 2. Real-time pub/sub for emergency notifications
# 3. Session management for HTTP/3 connection migration
# 4. Caching for HTTP/3 multiplexed requests
# 5. Rate limiting data for HTTP/3 connections
# 6. Analytics data for HTTP/3 performance monitoring
# 7. Queue management for async tasks over HTTP/3
# 8. Connection metadata for HTTP/3 stream management

# Key optimizations:
# - Increased memory limits for HTTP/3 multiplexing
# - Enhanced threading for concurrent streams
# - Optimized data structures for WebSocket queues
# - Advanced persistence for real-time data
# - Enhanced monitoring for HTTP/3 performance
# - Prepared for clustering and high availability

# Regular maintenance for HTTP/3 workload:
# 1. Monitor memory usage: INFO memory
# 2. Check slow queries: SLOWLOG GET 100
# 3. Monitor client connections: CLIENT LIST
# 4. Check keyspace info: INFO keyspace
# 5. Monitor pub/sub channels: PUBSUB CHANNELS
# 6. Check replication lag: INFO replication
# 7. Monitor HTTP/3 specific metrics via custom commands

# ============================================================================
# END OF REDIS 8.2.2 + HTTP/3 CONFIGURATION
# ============================================================================