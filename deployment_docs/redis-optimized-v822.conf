# ============================================================================
# REDIS 8.2.2 OPTIMIZED CONFIGURATION FOR NABOOM COMMUNITY
# ============================================================================
# File: /etc/redis/redis-8.2.2.conf
#
# Updated for Redis 8.2.2 with:
#   - Enhanced threading support
#   - Improved memory management
#   - Advanced security features
#   - Optimized for Django 5.2 + Celery 5.5.3
#   - Multiple database optimization
# ============================================================================

# ============================================================================
# NETWORK CONFIGURATION (Redis 8.2.2 Enhanced)
# ============================================================================

# Bind to localhost only for security
bind 127.0.0.1 -::1
port 6379

# Enhanced TCP settings for Redis 8.2.2
tcp-backlog 511
tcp-keepalive 300
timeout 300

# Redis 8.2.2 connection optimizations
socket-mark-id 0

# ============================================================================
# SECURITY CONFIGURATION (Redis 8.2.2 Features)
# ============================================================================

# Protected mode (strongly recommended)
protected-mode yes

# Master password (set a strong password)
requirepass your-strong-redis-password-here

# Redis 8.2.2 ACL system (enhanced user management)
# Default user (disabled for security)
user default off nopass ~* &* -@all

# Application user for Django/Celery (Redis 8.2.2 ACL)
user app_user on >your-app-user-password-here ~* &* +@all -@dangerous -flushdb -flushall -shutdown -debug -config

# Read-only user for monitoring
user monitoring_user on >your-monitoring-password-here ~* &* +@read +info +ping -@all

# Redis 8.2.2 security enhancements
enable-protected-configs yes
enable-debug-command no
enable-module-command no

# ============================================================================
# THREADING CONFIGURATION (Redis 8.2.2 New Feature)
# ============================================================================

# I/O threading (major performance improvement in Redis 8.2.2)
io-threads 4
io-threads-do-reads yes

# Background threading for non-blocking operations
lazyfree-lazy-eviction yes
lazyfree-lazy-expire yes
lazyfree-lazy-server-del yes
replica-lazy-flush yes

# ============================================================================
# MEMORY MANAGEMENT (Redis 8.2.2 Optimizations)
# ============================================================================

# Maximum memory (adjust based on available RAM)
maxmemory 6gb

# Enhanced eviction policy for Redis 8.2.2
maxmemory-policy allkeys-lru
maxmemory-samples 10

# Redis 8.2.2 memory optimizations
maxmemory-eviction-tenacity 10
hash-max-listpack-entries 1000
hash-max-listpack-value 64
list-max-listpack-size -2
list-compress-depth 1
set-max-intset-entries 512
zset-max-listpack-entries 256
zset-max-listpack-value 64

# Stream optimizations (Redis 8.2.2)
stream-node-max-bytes 4096
stream-node-max-entries 100

# Memory efficiency settings
activerehashing yes
stop-writes-on-bgsave-error yes

# ============================================================================
# PERSISTENCE CONFIGURATION (Redis 8.2.2 Enhanced)
# ============================================================================

# RDB Snapshots with enhanced timing
save 900 1      # Save if at least 1 key changed in 900 seconds
save 300 10     # Save if at least 10 keys changed in 300 seconds
save 60 10000   # Save if at least 10,000 keys changed in 60 seconds
save 10 100000  # Save if at least 100,000 keys changed in 10 seconds

# RDB file settings
rdbcompression yes
rdbchecksum yes
rdb-del-sync-files no
dbfilename dump.rdb
dir /var/lib/redis/

# AOF Configuration (Redis 8.2.2 Multi-Part AOF)
appendonly yes
appendfilename "appendonly.aof"
appenddirname "appendonlydir"

# AOF fsync policy (balanced performance/durability)
appendfsync everysec
no-appendfsync-on-rewrite no

# AOF rewrite settings (Redis 8.2.2 improvements)
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
aof-rewrite-incremental-fsync yes

# Redis 8.2.2 AOF enhancements
aof-load-truncated yes
aof-use-rdb-preamble yes
aof-timestamp-enabled no

# ============================================================================
# DATABASE CONFIGURATION
# ============================================================================

# Number of databases (16 is sufficient for our use case)
databases 16

# Database-specific optimizations for our use case:
# DB 0: Django Cache
# DB 1: Channels Layer (WebSocket pub/sub)
# DB 2: Celery Broker & Results
# DB 3: Django Sessions
# DB 4-15: Available for expansion

# ============================================================================
# PERFORMANCE TUNING (Redis 8.2.2)
# ============================================================================

# Background task frequency
hz 10
dynamic-hz yes

# Latency optimizations
latency-monitor-threshold 100

# Client timeout settings
timeout 300

# ============================================================================
# CLIENT CONFIGURATION (Enhanced for High Load)
# ============================================================================

# Maximum number of connected clients
maxclients 20000

# Client output buffer limits (optimized for Django/Celery workload)

# Normal clients (Django cache, sessions)
client-output-buffer-limit normal 0 0 0

# Replica clients (if using replication)
client-output-buffer-limit replica 256mb 64mb 60

# Pub/Sub clients (Django Channels WebSocket)
client-output-buffer-limit pubsub 64mb 16mb 60

# Client tracking (Redis 8.2.2 feature)
tracking-table-max-keys 1000000

# ============================================================================
# LOGGING CONFIGURATION (Redis 8.2.2)
# ============================================================================

# Log level
loglevel notice

# Log file
logfile /var/log/redis/redis-server.log

# Syslog support (optional)
# syslog-enabled yes
# syslog-ident redis
# syslog-facility local0

# ============================================================================
# SLOW LOG CONFIGURATION (Enhanced)
# ============================================================================

# Log commands slower than 10ms (10,000 microseconds)
slowlog-log-slower-than 10000

# Keep last 1000 slow commands
slowlog-max-len 1000

# ============================================================================
# ADVANCED CONFIGURATION (Redis 8.2.2)
# ============================================================================

# Notification settings for keyspace events
notify-keyspace-events "Ex"

# Hash table settings for memory efficiency
hash-max-ziplist-entries 512
hash-max-ziplist-value 64

# List settings (Redis 8.2.2 listpack optimization)
list-max-ziplist-size -2
list-compress-depth 0

# Set settings
set-max-intset-entries 512

# Sorted set settings (Redis 8.2.2 listpack)
zset-max-ziplist-entries 128
zset-max-ziplist-value 64

# HyperLogLog settings
hll-sparse-max-bytes 3000

# ============================================================================
# REPLICATION CONFIGURATION (for future scaling)
# ============================================================================

# Master-replica settings (uncomment if using replication)
# replicaof <masterip> <masterport>
# masterauth <master-password>
# replica-serve-stale-data yes
# replica-read-only yes
# repl-diskless-sync no
# repl-diskless-sync-delay 5
# replica-priority 100

# Redis 8.2.2 replication improvements
# repl-diskless-load disabled
# replica-lazy-flush yes

# ============================================================================
# CLUSTER CONFIGURATION (for future scaling)
# ============================================================================

# Redis Cluster settings (uncomment for cluster mode)
# cluster-enabled yes
# cluster-config-file nodes-6379.conf
# cluster-node-timeout 15000
# cluster-require-full-coverage yes

# Redis 8.2.2 cluster improvements
# cluster-migration-barrier 1
# cluster-allow-reads-when-down no

# ============================================================================
# MODULES CONFIGURATION (Redis 8.2.2)
# ============================================================================

# Load Redis modules (uncomment as needed)
# loadmodule /usr/lib/redis/modules/redisearch.so
# loadmodule /usr/lib/redis/modules/redisjson.so
# loadmodule /usr/lib/redis/modules/redistimeseries.so

# Module configurations
# Redis modules directory
# dir /usr/lib/redis/modules/

# ============================================================================
# MEMORY ANALYSIS AND MONITORING (Redis 8.2.2)
# ============================================================================

# Memory usage tracking
# maxmemory-samples 5
# active-expire-effort 1

# Redis 8.2.2 memory analysis
# memory-usage-sample-probability 0.1

# ============================================================================
# NETWORKING OPTIMIZATIONS (Redis 8.2.2)
# ============================================================================

# TCP keep-alive optimizations
tcp-keepalive 300

# Socket optimizations
so-keepalive 1

# TLS Configuration (if using TLS - Redis 8.2.2 enhanced)
# port 0
# tls-port 6380
# tls-cert-file /etc/redis/tls/redis.crt
# tls-key-file /etc/redis/tls/redis.key
# tls-ca-cert-file /etc/redis/tls/ca.crt
# tls-dh-params-file /etc/redis/tls/redis.dh
# tls-protocols "TLSv1.2 TLSv1.3"
# tls-ciphers HIGH:!aNULL:!MD5
# tls-ciphersuites TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256

# ============================================================================
# DEBUGGING AND DIAGNOSTICS (Redis 8.2.2)
# ============================================================================

# Crash log and debugging
# always-show-logo yes
# crash-log-enabled no
# crash-memcheck-enabled no

# ============================================================================
# REDIS 8.2.2 EXPERIMENTAL FEATURES
# ============================================================================

# Function libraries (Redis 8.2.2 new feature)
# enable-protected-configs yes
# enable-debug-command no
# enable-module-command no

# ============================================================================
# OPTIMIZATION FOR SPECIFIC WORKLOADS
# ============================================================================

# For Django Cache (DB 0) - optimize for frequent reads/writes
# For Channels Layer (DB 1) - optimize for pub/sub
# For Celery (DB 2) - optimize for queue operations
# For Sessions (DB 3) - optimize for TTL operations

# These optimizations are handled automatically by Redis 8.2.2's
# improved algorithms and the settings configured above.

# ============================================================================
# MONITORING AND METRICS (Redis 8.2.2)
# ============================================================================

# Enable latency monitoring
latency-monitor-threshold 100

# Track memory fragmentation
# active-defrag-enabled yes
# active-defrag-ignore-bytes 100mb
# active-defrag-threshold-lower 10
# active-defrag-threshold-upper 100
# active-defrag-cycle-min 1
# active-defrag-cycle-max 25

# ============================================================================
# BACKUP AND DISASTER RECOVERY
# ============================================================================

# Automatic backup configuration (handled by separate scripts)
# These settings ensure data integrity during backups

# Stop writes if last background save failed
stop-writes-on-bgsave-error yes

# Delete RDB files used only for replication in the master
# when replication is no longer needed
rdb-del-sync-files no

# ============================================================================
# ENVIRONMENT-SPECIFIC SETTINGS
# ============================================================================

# Development settings (comment out in production)
# protected-mode no
# bind 127.0.0.1

# Production settings (ensure these are active)
protected-mode yes
bind 127.0.0.1 -::1

# ============================================================================
# END OF CONFIGURATION
# ============================================================================

# This configuration is optimized for:
# - Python 3.12.3 applications
# - Django 5.2 with async support
# - Celery 5.5.3 with enhanced monitoring
# - High-throughput WebSocket connections via Channels
# - Multi-database separation for different services
# - Production security and performance requirements

# Regular maintenance tasks:
# 1. Monitor memory usage with INFO memory
# 2. Check slow log with SLOWLOG GET
# 3. Monitor client connections with CLIENT LIST
# 4. Check keyspace info with INFO keyspace
# 5. Monitor replication lag if using replicas
# 6. Review and rotate log files regularly