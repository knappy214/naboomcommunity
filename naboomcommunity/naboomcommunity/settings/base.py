"""
Django settings for naboomcommunity project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import importlib
import os

PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(PROJECT_DIR)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-your-secret-key-here'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'naboomneighbornet.net.za', 'www.naboomneighbornet.net.za']

# CSRF settings for proxy/nginx setup
CSRF_TRUSTED_ORIGINS = [
    'https://naboomneighbornet.net.za',
    'https://www.naboomneighbornet.net.za',
    'http://naboomneighbornet.net.za',
    'http://www.naboomneighbornet.net.za',
]

# Security settings for proxy setup
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
USE_X_FORWARDED_HOST = True
USE_X_FORWARDED_PORT = True

# Session and cookie settings for HTTPS
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_HTTPONLY = True

# Additional security headers
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# Content Security Policy settings - Disabled in favor of custom CSPMiddleware
# SECURE_CONTENT_SECURITY_POLICY = {
#     'default-src': "'self'",
#     'img-src': "'self' data: blob: https://s3.naboomneighbornet.net.za https://www.gravatar.com https://*.gravatar.com",
#     'script-src': "'self' 'unsafe-inline' 'unsafe-eval'",
#     'style-src': "'self' 'unsafe-inline'",
#     'font-src': "'self' data:",
#     'connect-src': "'self'",
#     'frame-src': "'self'",
#     'object-src': "'none'",
#     'base-uri': "'self'",
#     'form-action': "'self'",
# }



# Application definition

INSTALLED_APPS = [
    "django.contrib.gis",
    "home",
    "search",
    "api",
    "wagtail.contrib.forms",
    "wagtail.contrib.redirects",
    "wagtail.locales",
    "wagtail.contrib.simple_translation",
    "wagtail.embeds",
    "wagtail.sites",
    "wagtail.users",
    "wagtail.snippets",
    "wagtail.documents",
    "wagtail.images",
    "wagtail.search",
    "wagtail.admin",
    "wagtail",
    "modelcluster",
    "taggit",
    "django_filters",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "storages",
    "rest_framework",
    "rest_framework.authtoken",
    "corsheaders",
    "panic",
]

if importlib.util.find_spec("psycopg2") or importlib.util.find_spec("psycopg"):
    INSTALLED_APPS.insert(1, "django.contrib.postgres")

# Enable Wagtail API v2 and OpenAPI schema generation
INSTALLED_APPS += [
    "wagtail.api.v2",
    "drf_spectacular",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "panic.middleware.VehiclePingRateLimitMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "wagtail.contrib.redirects.middleware.RedirectMiddleware",
    "home.middleware.CSPMiddleware",  # Re-enabled to fix CSP image loading issues
]

ROOT_URLCONF = "naboomcommunity.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(PROJECT_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "naboomcommunity.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": os.getenv("POSTGRES_DB", "naboomneighbornetdb"),
        "USER": os.getenv("POSTGRES_USER", "naboomneighbornetdb_user"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD", "hpG8R0bIQpS@&5yO"),
        "HOST": os.getenv("POSTGRES_HOST", "127.0.0.1"),
        "PORT": os.getenv("POSTGRES_PORT", "5432"),
    }
}

if not (importlib.util.find_spec("psycopg2") or importlib.util.find_spec("psycopg")):
    DATABASES["default"].update(
        {
            "ENGINE": "django.contrib.gis.db.backends.spatialite",
            "NAME": os.getenv("SQLITE_NAME", os.path.join(BASE_DIR, "naboom.sqlite3")),
        }
    )
    SPATIALITE_LIBRARY_PATH = os.getenv("SPATIALITE_LIBRARY_PATH", "mod_spatialite")


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True
WAGTAIL_I18N_ENABLED = True
USE_L10N = True

LANGUAGES = [
    ("en", "English"),
    ("af", "Afrikaans"),
]
WAGTAIL_CONTENT_LANGUAGES = LANGUAGES
# Add this line for Django to find translation files
LOCALE_PATHS = [
    os.path.join(PROJECT_DIR, 'home', 'locale'),
]

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

STATICFILES_DIRS = [
    os.path.join(PROJECT_DIR, "static"),
]

# MinIO/S3 Storage Configuration
AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID', 'immunothreat')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY', 'INikbgTflu34yWjJHZYi')
WAGTAILIMAGES_EXTENSIONS = ['gif', 'jpg', 'jpeg', 'png', 'webp']
WAGTAILDOCS_SERVE_METHOD = 'redirect'  

AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME', 'naboomneighbornet-media')
AWS_S3_ENDPOINT_URL = 'https://s3.naboomneighbornet.net.za'
AWS_S3_CUSTOM_DOMAIN = 's3.naboomneighbornet.net.za'
AWS_DEFAULT_ACL = 'public-read'

AWS_S3_FILE_OVERWRITE = False
AWS_QUERYSTRING_AUTH = False
AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME', 'us-east-1')
AWS_S3_OBJECT_PARAMETERS = { 
    'CacheControl': 'max-age=86400', 
    'ContentDisposition': 'inline', 
}
WAGTAIL_STORAGES_DOCUMENTS_FRONTENDCACHE = {
    'default': {
        'BACKEND': 'wagtail.contrib.frontend_cache.backends.HTTPBackend',
        'LOCATION': 'https://s3.naboomneighbornet.net.za',
    }
}

# Wagtail document storage configuration
WAGTAILDOCS_STORAGE_BACKEND = 'naboomcommunity.custom_storages.DocumentStorage'



# Static files configuration for MinIO
STATIC_ROOT = os.path.join(BASE_DIR, "static")
# Temporarily serve static files locally to fix admin styling
STATIC_URL = "/static/"

# Media files configuration for MinIO
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = f"{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME}/media/"

# MinIO/S3 Storage Configuration (Legacy Django settings for compatibility)
DEFAULT_FILE_STORAGE = 'naboomcommunity.custom_storages.MediaStorage'
# Temporarily disable S3 static storage to serve admin CSS locally
# STATICFILES_STORAGE = 'naboomcommunity.custom_storages.StaticStorage'

# Default storage settings (Django 4.2+ format)
# See https://docs.djangoproject.com/en/5.2/ref/settings/#std-setting-STORAGES
STORAGES = {
    "default": {
        "BACKEND": "naboomcommunity.custom_storages.MediaStorage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

# Wagtail-specific storage configuration
WAGTAILIMAGES_FORMAT_CONVERSIONS = {
    'bmp': 'jpeg',
    'webp': 'webp',
}

# Configure Wagtail to use S3 for images
WAGTAILIMAGES_BACKEND = 'wagtail.images.backends.pillow.PillowBackend'
WAGTAILIMAGES_EXTENSIONS = ['gif', 'jpg', 'jpeg', 'png', 'webp', 'svg']

# Configure Wagtail images to use S3 storage
WAGTAILIMAGES_STORAGE_BACKEND = 'naboomcommunity.custom_storages.MediaStorage'

# Ensure Wagtail uses the correct storage for image serving
WAGTAILIMAGES_SERVE_METHOD = 'redirect'  # Use redirects to S3 URLs

# Configure image URL generation for admin
WAGTAILIMAGES_JPEG_QUALITY = 85
WAGTAILIMAGES_WEBP_QUALITY = 85

# Ensure proper URL generation for S3 images
WAGTAILIMAGES_URL_GENERATOR = 'wagtail.images.utils.url_generator'

# Configure Wagtail API for proper image serving
WAGTAILIMAGES_API_FIELDS = [
    'id', 'title', 'file', 'width', 'height', 'created_at', 'file_size'
]

# Use custom image model for better S3 URL generation
WAGTAILIMAGES_IMAGE_MODEL = 'home.CustomImage'

# Document storage for Wagtail documents
WAGTAILDOCS_SERVE_METHOD = 'redirect'  # Use signed URLs for private documents

# Django sets a maximum of 1000 fields per form by default, but particularly complex page models
# can exceed this limit within Wagtail's page editor.
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10_000


# User Profile Model (extends Django's built-in User model)

# Wagtail settings

WAGTAIL_SITE_NAME = "Naboom Community"
WAGTAILADMIN_BASE_URL = "https://naboomneighbornet.net.za"

# Wagtail API v2 settings
WAGTAILAPI_BASE_URL = "https://naboomneighbornet.net.za"
WAGTAILAPI_SEARCH_ENABLED = True
WAGTAILAPI_LIMIT_MAX = 20

# Search
# https://docs.wagtail.org/en/stable/topics/search/backends.html
WAGTAILSEARCH_BACKENDS = {
    "default": {
        "BACKEND": "wagtail.search.backends.database",
    }
}

# Base URL to use when referring to full URLs within the Wagtail admin backend -
# e.g. in notification emails. Don't include '/admin' or a trailing slash
# (This is now set above in the Wagtail settings section)

# Allowed file extensions for documents in the document library.
# This can be omitted to allow all files, but note that this may present a security risk
# if untrusted users are allowed to upload files -
# see https://docs.wagtail.org/en/stable/advanced_topics/deploying.html#user-uploaded-files
WAGTAILDOCS_EXTENSIONS = ['csv', 'docx', 'key', 'odt', 'pdf', 'pptx', 'rtf', 'txt', 'xlsx', 'zip']


DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://localhost:8081",
]

CLICKATELL_API_KEY = os.getenv("CLICKATELL_API_KEY", "")
CLICKATELL_BASE = os.getenv("CLICKATELL_BASE", "https://platform.clickatell.com")
PANIC_WEBHOOK_SECRET = os.getenv("PANIC_WEBHOOK_SECRET", "")
PANIC_VEHICLE_PING_RATE_LIMIT_PER_MINUTE = int(
    os.getenv("PANIC_VEHICLE_PING_RATE_LIMIT_PER_MINUTE", "120")
)
PANIC_TRACK_HISTORY_MINUTES = int(os.getenv("PANIC_TRACK_HISTORY_MINUTES", "60"))
PANIC_SSE_POLL_INTERVAL = float(os.getenv("PANIC_SSE_POLL_INTERVAL", "5"))
ENABLE_SSE = os.getenv("ENABLE_SSE", "0") in {"1", "true", "True"}

# Email and frontend configuration
EMAIL_BACKEND = os.getenv("EMAIL_BACKEND", "django.core.mail.backends.smtp.EmailBackend")
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", "no-reply@example.com")
FRONTEND_BASE_URL = os.getenv("FRONTEND_BASE_URL", "http://localhost:5173")
