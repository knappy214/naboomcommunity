#!/usr/bin/env python3
"""
Configure Redis 8.2.2 ACL for Emergency Response Databases
Creates users for databases 8, 9, and 10 with appropriate permissions.
"""

import redis
import secrets
import string
import sys
import os

def generate_secure_password(length=32):
    """Generate a secure password for Redis users."""
    alphabet = string.ascii_letters + string.digits + "!@#$%^&*"
    return ''.join(secrets.choice(alphabet) for _ in range(length))

def configure_emergency_redis_acl():
    """Configure Redis ACL for emergency response databases."""
    
    # Redis connection details - using realtime_user with ACL permissions
    redis_host = '127.0.0.1'
    redis_port = 6379
    redis_password = 'LvxG45/ArFSZVOOrWfzQoYbc+Jc8lB2Z'
    redis_username = 'realtime_user'
    
    try:
        # Connect to Redis with username
        r = redis.Redis(
            host=redis_host,
            port=redis_port,
            username=redis_username,
            password=redis_password,
            decode_responses=True
        )
        
        # Test connection
        r.ping()
        print("‚úì Connected to Redis successfully")
        
        # Emergency database users configuration
        emergency_users = {
            'emergency_db8_user': {
                'password': generate_secure_password(),
                'database': 8,
                'description': 'Emergency location data and GPS tracking',
                'permissions': '+@read +@write +@stream +pubsub -@dangerous',
                'keys': '~emergency:location:* ~emergency:gps:* ~emergency:tracking:*'
            },
            'emergency_db9_user': {
                'password': generate_secure_password(),
                'database': 9,
                'description': 'Emergency medical data and sensitive information',
                'permissions': '+@read +@write +@stream +pubsub -@dangerous',
                'keys': '~emergency:medical:* ~emergency:health:* ~emergency:sensitive:*'
            },
            'emergency_db10_user': {
                'password': generate_secure_password(),
                'database': 10,
                'description': 'Emergency notifications and real-time updates',
                'permissions': '+@read +@write +@stream +pubsub -@dangerous',
                'keys': '~emergency:notifications:* ~emergency:alerts:* ~emergency:realtime:*'
            }
        }
        
        # Create users
        for username, config in emergency_users.items():
            try:
                # Create the user
                r.execute_command('ACL', 'SETUSER', username, 
                                'on', 
                                f">{config['password']}", 
                                config['keys'],
                                '&*',
                                *config['permissions'].split())
                
                print(f"‚úì Created user: {username}")
                print(f"  Database: {config['database']}")
                print(f"  Description: {config['description']}")
                print(f"  Password: {config['password']}")
                print()
                
            except Exception as e:
                print(f"‚úó Failed to create user {username}: {str(e)}")
                return False
        
        # Test database access
        print("Testing database access...")
        for username, config in emergency_users.items():
            try:
                # Test connection to specific database
                test_r = redis.Redis(
                    host=redis_host,
                    port=redis_port,
                    username=username,
                    password=config['password'],
                    db=config['database'],
                    decode_responses=True
                )
                
                # Test basic operations
                test_r.set('test:key', 'test_value')
                test_value = test_r.get('test:key')
                test_r.delete('test:key')
                
                if test_value == 'test_value':
                    print(f"‚úì Database {config['database']} access verified for {username}")
                else:
                    print(f"‚úó Database {config['database']} access failed for {username}")
                    return False
                    
            except Exception as e:
                print(f"‚úó Database {config['database']} test failed for {username}: {str(e)}")
                return False
        
        # Save passwords to environment file
        env_file = '/var/www/naboomcommunity/naboomcommunity/.env.emergency_redis'
        with open(env_file, 'w') as f:
            f.write("# Emergency Redis Database Credentials\n")
            f.write("# Generated by configure_emergency_redis_acl.py\n\n")
            
            for username, config in emergency_users.items():
                f.write(f"# {config['description']}\n")
                f.write(f"{username.upper()}_PASSWORD={config['password']}\n")
                f.write(f"{username.upper()}_DATABASE={config['database']}\n\n")
        
        print(f"‚úì Emergency Redis credentials saved to {env_file}")
        
        # Update Django settings with new credentials
        print("\nUpdating Django settings...")
        update_django_settings(emergency_users)
        
        print("\n‚úì Emergency Redis ACL configuration completed successfully!")
        return True
        
    except Exception as e:
        print(f"‚úó Redis configuration failed: {str(e)}")
        return False

def update_django_settings(emergency_users):
    """Update Django settings with emergency Redis credentials."""
    
    settings_file = '/var/www/naboomcommunity/naboomcommunity/naboomcommunity/settings/production.py'
    
    # Read current settings
    with open(settings_file, 'r') as f:
        content = f.read()
    
    # Add emergency Redis users to the redis_users dictionary
    emergency_redis_config = """
# Emergency Response Redis Users (Databases 8, 9, 10)
'EMERGENCY_DB8_PASSWORD': {'user': 'emergency_db8_user', 'password': '""" + emergency_users['emergency_db8_user']['password'] + """'},
'EMERGENCY_DB9_PASSWORD': {'user': 'emergency_db9_user', 'password': '""" + emergency_users['emergency_db9_user']['password'] + """'},
'EMERGENCY_DB10_PASSWORD': {'user': 'emergency_db10_user', 'password': '""" + emergency_users['emergency_db10_user']['password'] + """'},
"""
    
    # Find the redis_users dictionary and add emergency users
    if 'redis_users = {' in content:
        # Insert emergency users after the existing users
        content = content.replace(
            "'MONITORING_PASSWORD': {'user': 'monitoring_user', 'password': 'cYzwdiPoN4taA1jBwFJZqhbQAuUR1ykb'},\n}",
            "'MONITORING_PASSWORD': {'user': 'monitoring_user', 'password': 'cYzwdiPoN4taA1jBwFJZqhbQAuUR1ykb'}," + emergency_redis_config + "}"
        )
        
        # Write updated settings
        with open(settings_file, 'w') as f:
            f.write(content)
        
        print("‚úì Django settings updated with emergency Redis credentials")
    else:
        print("‚ö† Could not find redis_users dictionary in settings file")

if __name__ == "__main__":
    print("Configuring Redis 8.2.2 ACL for Emergency Response Databases...")
    print("=" * 60)
    
    success = configure_emergency_redis_acl()
    
    if success:
        print("\nüéâ Emergency Redis ACL configuration completed successfully!")
        print("\nNext steps:")
        print("1. Restart Redis service: sudo systemctl restart redis")
        print("2. Test emergency database connections")
        print("3. Update application configuration if needed")
        sys.exit(0)
    else:
        print("\n‚ùå Emergency Redis ACL configuration failed!")
        sys.exit(1)
