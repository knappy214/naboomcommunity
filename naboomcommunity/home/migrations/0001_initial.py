# Generated by Django 5.2.5 on 2025-08-31 11:35

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0095_groupsitepermission'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='HomePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the user group', max_length=100, unique=True, verbose_name='Name')),
                ('description', models.TextField(blank=True, help_text='Description of the user group', verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the group is currently active', verbose_name='Is active')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when group was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when group was last updated', verbose_name='Updated at')),
            ],
            options={
                'verbose_name': 'User Group',
                'verbose_name_plural': 'User Groups',
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the user role', max_length=100, unique=True, verbose_name='Name')),
                ('description', models.TextField(blank=True, help_text='Description of the user role', verbose_name='Description')),
                ('permissions', models.JSONField(default=dict, help_text='JSON field containing role permissions', verbose_name='Permissions')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the role is currently active', verbose_name='Is active')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when role was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when role was last updated', verbose_name='Updated at')),
            ],
            options={
                'verbose_name': 'User Role',
                'verbose_name_plural': 'User Roles',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(blank=True, help_text='Contact phone number', max_length=20, verbose_name='Phone')),
                ('date_of_birth', models.DateField(blank=True, help_text="User's date of birth", null=True, verbose_name='Date of birth')),
                ('gender', models.CharField(blank=True, help_text="User's gender identity", max_length=20, verbose_name='Gender')),
                ('address', models.TextField(blank=True, help_text="User's physical address", verbose_name='Address')),
                ('city', models.CharField(blank=True, help_text="User's city of residence", max_length=100, verbose_name='City')),
                ('province', models.CharField(blank=True, help_text="User's province/state", max_length=100, verbose_name='Province')),
                ('postal_code', models.CharField(blank=True, help_text="User's postal/zip code", max_length=20, verbose_name='Postal code')),
                ('allergies', models.TextField(blank=True, help_text="User's known allergies", verbose_name='Allergies')),
                ('medical_conditions', models.TextField(blank=True, help_text="User's medical conditions", verbose_name='Medical conditions')),
                ('current_medications', models.TextField(blank=True, help_text="User's current medications", verbose_name='Current medications')),
                ('emergency_contact_name', models.CharField(blank=True, help_text="Emergency contact person's name", max_length=255, verbose_name='Emergency contact name')),
                ('emergency_contact_phone', models.CharField(blank=True, help_text="Emergency contact person's phone number", max_length=20, verbose_name='Emergency contact phone')),
                ('emergency_contact_relationship', models.CharField(blank=True, help_text='Relationship to emergency contact person', max_length=100, verbose_name='Emergency contact relationship')),
                ('preferred_language', models.CharField(default='en', help_text="User's preferred language", max_length=10, verbose_name='Preferred language')),
                ('timezone', models.CharField(default='UTC', help_text="User's timezone", max_length=50, verbose_name='Timezone')),
                ('email_notifications', models.BooleanField(default=True, help_text='Enable email notifications', verbose_name='Email notifications')),
                ('sms_notifications', models.BooleanField(default=False, help_text='Enable SMS notifications', verbose_name='SMS notifications')),
                ('mfa_enabled', models.BooleanField(default=False, help_text='Enable multi-factor authentication', verbose_name='MFA enabled')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when profile was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when profile was last updated', verbose_name='Updated at')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
        migrations.CreateModel(
            name='UserGroupMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when user joined the group', verbose_name='Joined at')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the membership is currently active', verbose_name='Is active')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the membership', verbose_name='Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when membership was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when membership was last updated', verbose_name='Updated at')),
                ('group', models.ForeignKey(help_text='Group that the user belongs to', on_delete=django.db.models.deletion.CASCADE, to='home.usergroup', verbose_name='Group')),
                ('user', models.ForeignKey(help_text='User who is a member of the group', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('role', models.ForeignKey(help_text='Role assigned to the user in this group', on_delete=django.db.models.deletion.CASCADE, to='home.userrole', verbose_name='Role')),
            ],
            options={
                'verbose_name': 'User Group Membership',
                'verbose_name_plural': 'User Group Memberships',
                'unique_together': {('user', 'group')},
            },
        ),
    ]
