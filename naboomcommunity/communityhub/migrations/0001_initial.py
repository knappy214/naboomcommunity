# Generated by ChatGPT
from django.conf import settings
from django.db import migrations, models
import django.contrib.postgres.indexes
import django.db.models.deletion
import django.contrib.postgres.search
import django.core.validators
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("wagtailcore", "0095_groupsitepermission"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RunSQL(
            "CREATE EXTENSION IF NOT EXISTS pg_trgm;",
            reverse_sql="DROP EXTENSION IF EXISTS pg_trgm;",
        ),
        migrations.CreateModel(
            name="ChannelModerationPolicy",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("translation_key", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("name", models.CharField(max_length=255, verbose_name="Name")),
                ("description", models.TextField(blank=True, verbose_name="Description")),
                ("auto_approve_join_requests", models.BooleanField(default=False)),
                (
                    "require_alert_approval",
                    models.BooleanField(
                        default=False,
                        help_text="Moderators must approve alerts before they go live.",
                    ),
                ),
                (
                    "require_post_approval",
                    models.BooleanField(
                        default=False,
                        help_text="Moderators must approve posts before they appear.",
                    ),
                ),
                (
                    "escalation_minutes",
                    models.PositiveIntegerField(
                        default=30,
                        help_text="Escalate pending moderation items after N minutes.",
                        validators=[
                            django.core.validators.MinValueValidator(5),
                            django.core.validators.MaxValueValidator(720),
                        ],
                    ),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                        verbose_name="locale",
                    ),
                ),
            ],
            options={
                "verbose_name": "Moderation policy",
                "verbose_name_plural": "Moderation policies",
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
        ),
        migrations.CreateModel(
            name="ChannelAlertPolicy",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("translation_key", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("name", models.CharField(max_length=255, verbose_name="Name")),
                ("description", models.TextField(blank=True, verbose_name="Description")),
                (
                    "cooldown_minutes",
                    models.PositiveIntegerField(
                        default=30,
                        help_text="Minimum spacing between alerts from the same user.",
                        validators=[
                            django.core.validators.MinValueValidator(5),
                            django.core.validators.MaxValueValidator(720),
                        ],
                    ),
                ),
                (
                    "duplicate_window_minutes",
                    models.PositiveIntegerField(
                        default=15,
                        help_text="Merge similar alerts raised within this window.",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(120),
                        ],
                    ),
                ),
                (
                    "duplicate_threshold",
                    models.FloatField(
                        default=0.7,
                        help_text="Trigram similarity required to merge duplicate alerts.",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                        verbose_name="locale",
                    ),
                ),
            ],
            options={
                "verbose_name": "Alert policy",
                "verbose_name_plural": "Alert policies",
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
        ),
        migrations.CreateModel(
            name="CannedReportReason",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("translation_key", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("title", models.CharField(max_length=255, verbose_name="Title")),
                ("description", models.TextField(blank=True, verbose_name="Description")),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                        verbose_name="locale",
                    ),
                ),
            ],
            options={
                "verbose_name": "Canned report reason",
                "verbose_name_plural": "Canned report reasons",
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
        ),
        migrations.CreateModel(
            name="Channel",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("translation_key", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "slug",
                    models.SlugField(
                        help_text="Stable channel identifier used in URLs.",
                        unique=True,
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Name")),
                ("description", models.TextField(blank=True, verbose_name="Description")),
                (
                    "kind",
                    models.CharField(
                        choices=[
                            ("emergency", "Emergency"),
                            ("municipal", "Municipal"),
                            ("general", "General"),
                            ("events", "Events"),
                            ("fire", "Fire"),
                            ("custom", "Custom"),
                        ],
                        default="general",
                        max_length=32,
                    ),
                ),
                (
                    "posting_policy",
                    models.CharField(
                        choices=[
                            ("open", "Open â€“ anyone may post"),
                            ("members", "Members only"),
                            ("moderated", "Moderated"),
                        ],
                        default="members",
                        max_length=16,
                    ),
                ),
                (
                    "is_private",
                    models.BooleanField(
                        default=True,
                        help_text="Private channels require an invite or an approved join request.",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "allow_alerts",
                    models.BooleanField(
                        default=True,
                        help_text="Members may broadcast alerts that are teased to non-members.",
                    ),
                ),
                (
                    "broadcast_scope",
                    models.CharField(
                        choices=[
                            ("community", "Entire community"),
                            ("channel", "Channel members"),
                        ],
                        default="community",
                        help_text="Determines how alerts fan out to the community.",
                        max_length=32,
                    ),
                ),
                (
                    "allow_join_requests",
                    models.BooleanField(
                        default=True,
                        help_text="Allow residents to request access without a direct invite.",
                    ),
                ),
                (
                    "default_alerts_enabled",
                    models.BooleanField(
                        default=True,
                        help_text="Default per-member preference for receiving alerts.",
                    ),
                ),
                (
                    "default_posts_enabled",
                    models.BooleanField(
                        default=True,
                        help_text="Default per-member preference for regular thread notifications.",
                    ),
                ),
                (
                    "teaser_character_limit",
                    models.PositiveIntegerField(
                        default=280,
                        help_text="Maximum characters shown to non-members when teasing private alerts.",
                        validators=[
                            django.core.validators.MinValueValidator(64),
                            django.core.validators.MaxValueValidator(1000),
                        ],
                    ),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                        verbose_name="locale",
                    ),
                ),
            ],
            options={
                "ordering": ("slug",),
                "verbose_name": "Channel",
                "verbose_name_plural": "Channels",
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
        ),
        migrations.CreateModel(
            name="ChannelConfiguration",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "alert_policy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="channel_configurations",
                        to="communityhub.channelalertpolicy",
                    ),
                ),
                (
                    "channel",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="configuration",
                        to="communityhub.channel",
                    ),
                ),
                (
                    "moderation_policy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="channel_configurations",
                        to="communityhub.channelmoderationpolicy",
                    ),
                ),
            ],
            options={
                "verbose_name": "Channel configuration",
                "verbose_name_plural": "Channel configurations",
            },
        ),
        migrations.CreateModel(
            name="ChannelInvite",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("email", models.EmailField(blank=True, max_length=254)),
                ("phone_number", models.CharField(blank=True, max_length=32)),
                ("token", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("expires_at", models.DateTimeField()),
                ("accepted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "accepted_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="community_invites_accepted",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "channel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="invites",
                        to="communityhub.channel",
                    ),
                ),
                (
                    "invited_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="community_invites_sent",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Channel invite",
                "verbose_name_plural": "Channel invites",
            },
        ),
        migrations.CreateModel(
            name="ChannelJoinRequest",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("message", models.TextField(blank=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("approved", "Approved"),
                            ("declined", "Declined"),
                            ("revoked", "Revoked"),
                        ],
                        default="pending",
                        max_length=16,
                    ),
                ),
                ("reviewed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "channel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="join_requests",
                        to="communityhub.channel",
                    ),
                ),
                (
                    "requester",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="community_join_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="community_join_reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ("-created_at",),
                "verbose_name": "Join request",
                "verbose_name_plural": "Join requests",
            },
        ),
        migrations.CreateModel(
            name="ChannelMembership",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("member", "Member"),
                            ("moderator", "Moderator"),
                            ("manager", "Manager"),
                        ],
                        default="member",
                        max_length=16,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "notifications",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Per-user notification preferences.",
                    ),
                ),
                ("last_read_at", models.DateTimeField(blank=True, null=True)),
                (
                    "channel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="memberships",
                        to="communityhub.channel",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="community_memberships",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Channel membership",
                "verbose_name_plural": "Channel memberships",
            },
        ),
        migrations.CreateModel(
            name="Thread",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(max_length=255)),
                ("summary", models.TextField(blank=True)),
                ("is_pinned", models.BooleanField(default=False)),
                ("pinned_until", models.DateTimeField(blank=True, null=True)),
                ("is_locked", models.BooleanField(default=False)),
                ("search_document", django.contrib.postgres.search.SearchVectorField(editable=False, null=True)),
                ("last_post_at", models.DateTimeField(blank=True, null=True)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="community_threads",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "channel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="threads",
                        to="communityhub.channel",
                    ),
                ),
            ],
            options={
                "ordering": ("-created_at", "-id"),
            },
        ),
        migrations.CreateModel(
            name="Post",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "kind",
                    models.CharField(
                        choices=[
                            ("text", "Text"),
                            ("alert", "Alert"),
                            ("system", "System"),
                        ],
                        default="text",
                        max_length=16,
                    ),
                ),
                ("body", models.TextField()),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("search_document", django.contrib.postgres.search.SearchVectorField(editable=False, null=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="community_posts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "channel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="posts",
                        to="communityhub.channel",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="community_posts_deleted",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "thread",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="posts",
                        to="communityhub.thread",
                    ),
                ),
            ],
            options={
                "ordering": ("created_at", "id"),
            },
        ),
        migrations.CreateModel(
            name="EventMeta",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("starts_at", models.DateTimeField()),
                ("ends_at", models.DateTimeField()),
                ("location", models.CharField(blank=True, max_length=255)),
                ("allow_rsvp", models.BooleanField(default=True)),
                ("capacity", models.PositiveIntegerField(blank=True, null=True)),
                ("external_link", models.URLField(blank=True)),
                (
                    "thread",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event",
                        to="communityhub.thread",
                    ),
                ),
            ],
            options={
                "verbose_name": "Event metadata",
                "verbose_name_plural": "Event metadata",
            },
        ),
        migrations.CreateModel(
            name="EventRSVP",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("yes", "Attending"), ("no", "Not attending"), ("maybe", "Maybe")],
                        default="yes",
                        max_length=8,
                    ),
                ),
                (
                    "guests",
                    models.PositiveIntegerField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(20)],
                    ),
                ),
                ("note", models.TextField(blank=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rsvps",
                        to="communityhub.eventmeta",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="community_event_rsvps",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Event RSVP",
                "verbose_name_plural": "Event RSVPs",
            },
        ),
        migrations.CreateModel(
            name="Device",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "kind",
                    models.CharField(
                        choices=[("expo", "Expo push token"), ("web", "Web Push subscription")],
                        max_length=16,
                    ),
                ),
                ("token", models.CharField(max_length=512)),
                ("is_active", models.BooleanField(default=True)),
                ("last_success_at", models.DateTimeField(blank=True, null=True)),
                ("last_failure_at", models.DateTimeField(blank=True, null=True)),
                ("failure_reason", models.CharField(blank=True, max_length=255)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="community_devices",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Notification device",
                "verbose_name_plural": "Notification devices",
            },
        ),
        migrations.CreateModel(
            name="Report",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("reason", models.TextField(blank=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("resolution_notes", models.TextField(blank=True)),
                (
                    "canned_reason",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reports",
                        to="communityhub.cannedreportreason",
                    ),
                ),
                (
                    "channel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reports",
                        to="communityhub.channel",
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reports",
                        to="communityhub.post",
                    ),
                ),
                (
                    "reporter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="community_reports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "resolved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="community_reports_resolved",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "thread",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reports",
                        to="communityhub.thread",
                    ),
                ),
            ],
            options={
                "ordering": ("-created_at",),
                "verbose_name": "Moderation report",
                "verbose_name_plural": "Moderation reports",
            },
        ),
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("action", models.CharField(max_length=64)),
                ("context", models.JSONField(blank=True, default=dict)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                (
                    "actor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="community_audit_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "channel",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="audit_events",
                        to="communityhub.channel",
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="audit_events",
                        to="communityhub.post",
                    ),
                ),
                (
                    "thread",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="audit_events",
                        to="communityhub.thread",
                    ),
                ),
            ],
            options={
                "ordering": ("-created_at",),
                "verbose_name": "Audit event",
                "verbose_name_plural": "Audit events",
            },
        ),
        migrations.AddConstraint(
            model_name="channelinvite",
            constraint=models.CheckConstraint(
                check=(
                    models.Q(("email__isnull", False), ("email__gt", ""))
                    | models.Q(("phone_number__isnull", False), ("phone_number__gt", ""))
                ),
                name="communityhub_invite_contact_required",
            ),
        ),
        migrations.AddIndex(
            model_name="channelmembership",
            index=models.Index(
                fields=["channel", "role"],
                name="hub_member_chan_role",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="channelmembership",
            unique_together={("user", "channel")},
        ),
        migrations.AlterUniqueTogether(
            name="eventrsvp",
            unique_together={("event", "user")},
        ),
        migrations.AddIndex(
            model_name="thread",
            index=models.Index(
                fields=["channel", "-created_at"],
                name="hub_thread_chan_created",
            ),
        ),
        migrations.AddIndex(
            model_name="thread",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["search_document"],
                name="hub_thread_search_gin",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="channeljoinrequest",
            unique_together={("channel", "requester")},
        ),
        migrations.AddIndex(
            model_name="post",
            index=models.Index(
                fields=["channel", "-created_at"],
                name="hub_post_chan_created",
            ),
        ),
        migrations.AddIndex(
            model_name="post",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["search_document"],
                name="hub_post_search_gin",
            ),
        ),
        migrations.AddIndex(
            model_name="device",
            index=models.Index(
                fields=["user", "kind"],
                name="hub_device_user_kind",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="device",
            unique_together={("kind", "token")},
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["channel", "created_at"],
                name="hub_audit_chan_created",
            ),
        ),
        migrations.AlterModelOptions(
            name="channeljoinrequest",
            options={
                "ordering": ("-created_at",),
                "verbose_name": "Join request",
                "verbose_name_plural": "Join requests",
            },
        ),
        migrations.AlterModelOptions(
            name="eventrsvp",
            options={
                "verbose_name": "Event RSVP",
                "verbose_name_plural": "Event RSVPs",
            },
        ),
    ]
